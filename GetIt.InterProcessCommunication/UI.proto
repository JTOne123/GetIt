syntax = "proto3";

package ui;

import "google/protobuf/empty.proto";

service UI {
    rpc ShowScene (WindowSize) returns (Rectangle);
    rpc SetWindowTitle (WindowTitle) returns (google.protobuf.Empty);
    rpc SetBackground (SvgImage) returns (google.protobuf.Empty);
    rpc ClearScene (google.protobuf.Empty) returns (google.protobuf.Empty);
    rpc MakeScreenshot (google.protobuf.Empty) returns (PngImage);
    rpc AddPlayer (Player) returns (google.protobuf.Empty);
    rpc RemovePlayer (PlayerId) returns (google.protobuf.Empty);
    rpc SetPosition (PlayerPosition) returns (google.protobuf.Empty);
    rpc ChangePosition (PlayerPosition) returns (google.protobuf.Empty);
    rpc SetDirection (PlayerDirection) returns (google.protobuf.Empty);
    rpc ChangeDirection (PlayerDirection) returns (google.protobuf.Empty);
    rpc Say (PlayerText) returns (google.protobuf.Empty);
    rpc AskString (PlayerText) returns (StringAnswer);
    rpc AskBool (PlayerText) returns (BoolAnswer);
    rpc ShutUp (PlayerId) returns (google.protobuf.Empty);
    rpc SetPenState (PlayerPenState) returns (google.protobuf.Empty);
    rpc TogglePenState (PlayerId) returns (google.protobuf.Empty);
    rpc SetPenColor (PlayerPenColor) returns (google.protobuf.Empty);
    rpc ShiftPenColor (PlayerPenColorShift) returns (google.protobuf.Empty);
    rpc SetPenWeight (PlayerPenWeight) returns (google.protobuf.Empty);
    rpc ChangePenWeight (PlayerPenWeight) returns (google.protobuf.Empty);
    rpc SetSizeFactor (PlayerSizeFactor) returns (google.protobuf.Empty);
    rpc ChangeSizeFactor (PlayerSizeFactor) returns (google.protobuf.Empty);
    rpc SetNextCostume (PlayerId) returns (google.protobuf.Empty);
    rpc SendToBack (PlayerId) returns (google.protobuf.Empty);
    rpc BringToFront (PlayerId) returns (google.protobuf.Empty);
    rpc SetVisibility (PlayerVisibility) returns (google.protobuf.Empty);
    rpc MouseMoved (stream Position) returns (stream Position);
    rpc MouseClicked (VirtualScreenMouseClick) returns (MouseClick);
    rpc StartBatch (google.protobuf.Empty) returns (google.protobuf.Empty);
    rpc ApplyBatch (google.protobuf.Empty) returns (google.protobuf.Empty);
    rpc SceneBoundsChanged (google.protobuf.Empty) returns (stream Rectangle);
}

message Size {
    double width = 1;
    double height = 2;
}

message WindowSize {
    oneof windowSize {
        bool isNone = 1;
        Size size = 2;
    }
}

message Position {
    double x = 1;
    double y = 2;
}

message Rectangle {
    Position position = 1;
    Size size = 2;
}

message WindowTitle {
    oneof windowTitle {
        bool isNone = 1;
        string title = 2;
    }
}

message SvgImage {
    Size size = 1;
    string data = 2;
}
message PngImage {
    bytes data = 1;
}

message PlayerId {
    string value = 1;
}

message RGBAColor {
    int32 red = 1;
    int32 green = 2;
    int32 blue = 3;
    int32 alpha = 4;
}

message Pen {
    bool isOn = 1;
    double weight = 2;
    RGBAColor color = 3;
}

message SpeechBubble {
    oneof speechBubbleType {
        string sayText = 1;
        string askStringText = 2;
        string askBoolText = 3;
    }
}

message OptionalSpeechBubble {
    oneof speechBubble {
        bool isNone = 1;
        SpeechBubble data = 2;
    }
}

message PlayerData {
    double sizeFactor = 1;
    Position position = 2;
    double direction = 3;
    Pen pen = 4;
    OptionalSpeechBubble speechBubble = 5;
    repeated SvgImage costumes = 6;
    int32 costumeIndex = 7;
    int32 layer = 8;
    bool isVisible = 9;
}

message Player {
    PlayerId playerId = 1;
    PlayerData playerData = 2;
}

message PlayerPosition {
    PlayerId playerId = 1;
    Position position = 2;
}

message PlayerDirection {
    PlayerId playerId = 1;
    double direction = 2;
}

message PlayerText {
    PlayerId playerId = 1;
    string text = 2;
}

message StringAnswer {
    string text = 1;
}

message BoolAnswer {
    bool value = 1;
}

message PlayerPenState {
    PlayerId playerId = 1;
    bool isOn = 2;
}

message PlayerPenColor {
    PlayerId playerId = 1;
    RGBAColor color = 2;
}

message PlayerPenColorShift {
    PlayerId playerId = 1;
    double degrees = 2;
}

message PlayerPenWeight {
    PlayerId playerId = 1;
    double weight = 2;
}

message PlayerSizeFactor {
    PlayerId playerId = 1;
    double sizeFactor = 2;
}

message PlayerVisibility {
    PlayerId playerId = 1;
    bool isVisible = 2;
}

enum MouseButton {
    PRIMARY = 0;
    SECONDARY = 1;
}
message VirtualScreenMouseClick {
    MouseButton button = 1;
    Position virtualScreenPosition = 2;
}

message MouseClick {
    MouseButton button = 1;
    Position position = 2;
}
